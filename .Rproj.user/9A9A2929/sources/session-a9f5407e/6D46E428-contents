---
title: "main_project"
output: html_document
date: "2025-03-17"
editor_options: 
  chunk_output_type: console
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

```{r required libraries, results='hide'}
library(BiocManager)
library(IRanges)
library(dplyr)
library(tidyr)
library(tibble)
library(readr)
library(ggplot2)
library(purrr)
library(magrittr)
library(pheatmap)
library(textshape)
library(Rcpp)
library(matrixStats)
library(rtracklayer)
library(tidyverse)
library(DESeq2)
library(broom)
library(reshape)
```

```{r}
COUNTS_PATH <- "/scratch/Shares/rinnclass/MASTER_CLASS/STUDENTS/lupa9404/MASTER_CLASS/project/data/nf-3.14/salmon.merged.gene_counts.tsv"
TPM_PATH    <- "/scratch/Shares/rinnclass/MASTER_CLASS/STUDENTS/lupa9404/MASTER_CLASS/project/data/nf-3.14/salmon.merged.gene_tpm.tsv"
```

```{r load counts and get counts filtered}
# Load the gene counts table
counts_df_orig <- read.table(COUNTS_PATH, header=TRUE, row.names=1)

# Create gene to symbol (g2s) dictionary mapping gene metadata (gene id) with gene name
g2s<- data.frame(gene_id = rownames(counts_df_orig), gene_name = counts_df_orig[ , 1])
write.csv(g2s, "/scratch/Shares/rinnclass/MASTER_CLASS/STUDENTS/lupa9404/MASTER_CLASS/project/results/g2s.csv")

# Remove gene name column from matrix (matrices are numeric) and convert counts to numerical matrix
counts_df                <- counts_df_orig %>% select(-gene_name)
counts_matrix_numerical  <- as.matrix(counts_df) 
counts_matrix_rounded    <- round(counts_matrix_numerical)

# Filter genes with no relevant counts (less than 1 for the sum of the row)
counts_filtered <- counts_matrix_rounded[rowSums(counts_matrix_rounded) > 0, ]

# Save progress in an .RData file
save(counts_df, counts_filtered, g2s, file = "/scratch/Shares/rinnclass/MASTER_CLASS/STUDENTS/lupa9404/MASTER_CLASS/project/results/counts_files.RData")
```

```{r make deseq_samples df}
# Make a column from the titles of the columns of the counts_matrix table
deseq_samples <- data.frame(sample_id = colnames(counts_df))

# Get the time and replicate values from the sample names in deseq_samples
split_values <- strsplit(deseq_samples$sample_id, "_")
time_values <- sapply(split_values, function(x) x[[2]])
replicate_values <- sapply(split_values, function(x) x[[3]])

# Add time and replicate values as columns to deseq_samples and factor them
deseq_samples$time_point <- time_values
deseq_samples$replicate <- replicate_values
deseq_samples$time_point <- factor(deseq_samples$time_point)
deseq_samples$replicate <- factor(deseq_samples$replicate)

# testing sample sheet and counts are arranged properly 
stopifnot(all(colnames(counts_integer) == rownames(deseq_samples$sample_id)))

save(deseq_samples, file = "/scratch/Shares/rinnclass/MASTER_CLASS/STUDENTS/lupa9404/MASTER_CLASS/project/results/deseq_samples.RData")
```

```{r run DESeq and obtain rlogs}
# Prepare DESeq dataset
dds_time <- DESeqDataSetFromMatrix(countData = counts_filtered,
                                         colData = deseq_samples,
                                         design = ~ time_point) 

# Run DESeq and get the names for the comparisons
dds_time      <- DESeq(dds_time)
results_names <- resultsNames(dds_time)
results_names <- results_names[results_names != "Intercept"]

# Regularized Log transformation (rlog) stabilizes variance for downstream visualization or clustering.
rlog_counts <- rlog(dds_time, blind = TRUE)
rlog_counts_matrix <- assay(rlog_counts)
write_rds(rlog_counts_matrix, "/scratch/Shares/rinnclass/MASTER_CLASS/STUDENTS/lupa9404/MASTER_CLASS/project/results/rlog_counts.rds")
save(dds_time, file = "/scratch/Shares/rinnclass/MASTER_CLASS/STUDENTS/lupa9404/MASTER_CLASS/project/results/dds_time.RData")
```

```{r obtain results for all comparisons}
# Create empty df to store results values
res_df <- data.frame("gene_id" = character(), 
                     "baseMean" = numeric(), 
                     "log2FoldChange" = numeric(), 
                     "lfcSE" = numeric(),
                     "stat" = numeric(),
                     "pvalue" = numeric(),
                     "padj" = numeric(),
                     "gene_name" = character(),
                     "result_name" = character())

# Loop to get the results of each comparison from dds object and make main res_df with all of them
for(i in 1:length(results_names)) {
  results_name <- results_names[i] # get time comparison i
  res <- results(dds_time, name = results_name) # get DESeq results for time comparison i
  # Temporary df to store the results for each comparison i
  tmp_res_df <- res %>% as.data.frame() %>% 
    rownames_to_column("gene_id") %>% merge(g2s) %>% mutate(result_name = results_name)
  # Add the temporary df to the main res_df for each comparison i
  res_df <- bind_rows(res_df, tmp_res_df)
}
save(res_df, file = "/scratch/Shares/rinnclass/MASTER_CLASS/STUDENTS/lupa9404/MASTER_CLASS/project/results/res_df.RData")
```

```{r filtering results}
# Checking NAs: sum(is.na(res_df$padj))
# If we do want to clear them out:NoNA <- complete.cases(res_df)
  
#filtered_res_df_2 <- filtered_res_df %>% filter(padj < 0.05, abs(log2FoldChange) > 1)

filtered_res_df <- res_df %>%
  filter(padj < 0.05)

# gene_id and gene_name produces a list of 7573 and 7570 respectevly. Maybe check why?
sig_genes <- unique(filtered_res_df$gene_name) # genes that change in at least one time point

# Get all gene names that are significant
sig_genes_df <- as.data.frame(filtered_res_df$gene_name, collapse = "\n")

# Let's make sure to only get the unique names
sig_genes_df <- unique(sig_genes_df)

# Renaming the column (handy code that is used a lot :)
sig_genes_df <- sig_genes_df %>% 
  rename(gene_name = `filtered_res_df$gene_name`)

# Now let's write this out and do gene enrichment analysis
write.table(sig_genes_df["gene_name"], row.names = FALSE, col.names = FALSE, "results/gene_names.csv")

# copy and paste into EnrichR 
#https://maayanlab.cloud/Enrichr/
```

```{r histogram visualization}

hist(filtered_res_df$baseMean)

# Let's change the X-axis
hist(filtered_res_df$baseMean, xlim = c(0,1000), breaks = 1000)

# Let's do the same for Pvalue
hist(filtered_res_df$padj)

# Fold change
hist(filtered_res_df$log2FoldChange, xlim = c(-5, 5), breaks = 1000)

# How does this compare to Lfsce
hist(filtered_res_df$lfcSE)

# Let's see the median basemean expression of all genes
basemean_all_genes <- median(res_df$baseMean)

# Let's do the same for our sign genes 
basemena_sig_genes <- median(filtered_res_df$baseMean)

# Ok looks a lot higher basemean for our sign genes.
# Let's do a t-test to see if this is signficant :

t.test(res_df$baseMean, filtered_res_df$baseMean)

# Cool it's a significant result :) !

# First we need to load our counts matrix
#counts_matrix <- read.table("/scratch/Shares/rinnclass/MASTER_CLASS/lessons/04_RNAseq_Dox/01_Mouse_dox_wt/good_class_RNAseq/pipeline_output/star_salmon/salmon.merged.gene_counts.tsv", header=TRUE, row.names=1)

# Let's make sure our counts file is the right format
#view(counts_matrix)

# Ok so we see gene_name and gene_id are same in both filtered_res_df_2 and counts_matrix
# Let's intersect these two tables !

#counts_dox_genes <- counts_matrix[filtered_res_df_2$gene_id,]
#unique(filtered_res_df_2$gene_id)
# Isn't that handy we can index into the counts matrix and get 
# the rows that match filtered_res_df_2$gene_id and all the columns
```

```{r, TPM}
TPM_orig <- read.table("/scratch/Shares/rinnclass/MASTER_CLASS/STUDENTS/lupa9404/MASTER_CLASS/project/data/nf-3.14/salmon.merged.gene_tpm.tsv", header=TRUE, row.names=1)

TPM <- TPM_orig %>% select(-gene_name)

# Filtering for TPM of at least 1 across samples.
TPM_filtered <- TPM[rowSums(TPM) > 0, ]
# Checking
any(rowSums(TPM_filtered) < 0)
any(rowSums(TPM) < 0)


# Time and replicate values
time_points <- c("0", "12", "24", "48", "96")
replicates <- c("_1", "_2", "_3")

# initialize list for results
average_and_stddev_values <- list()
# now each object into the for loop is "tp"
for (tp in time_points) {
  cols <- grep(paste0("WT_", tp, "_"), colnames(TPM_filtered))
  avg <- rowMeans(TPM_filtered[, cols])
  std_dev <- apply(TPM_filtered[, cols], 1, sd)
  std_dev <- data.frame(std_dev)
  combined <- cbind(avg, std_dev)
  average_and_stddev_values <- c(average_and_stddev_values, list(combined))
}

# Convert the list to a data frame
average_and_stddev_values <- do.call(cbind, average_and_stddev_values)
# Add column names for the time points
colnames(average_and_stddev_values) <- paste0(rep(time_points, each = 2), c("_avg", "_sd"))

# note I am adding in some other files we just saved, this is in case
# we just want to open up TPM data we still have G2s and Samplesheet.
save(TPM, average_and_stddev_values, TPM_filtered, g2s, deseq_samples, file = "/scratch/Shares/rinnclass/MASTER_CLASS/STUDENTS/lupa9404/MASTER_CLASS/project/results/TPM_results.Rdata" )

# test
load("/scratch/Shares/rinnclass/MASTER_CLASS/STUDENTS/lupa9404/MASTER_CLASS/project/results/TPM_results.Rdata")
```

